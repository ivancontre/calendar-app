{"version":3,"sources":["helpers/fetch.ts","store/auth/action.ts","store/auth/types.ts","store/calendar/actions.ts","store/calendar/types.ts","store/filter/action.ts","store/filter/types.ts","components/ui/Navbar.tsx","helpers/calendar-messages-es.ts","components/calendar/CalendarEvent.tsx","components/calendar/CalendarModal.tsx","store/modal/actions.ts","store/modal/types.ts","components/ui/AddNewFab.tsx","components/ui/DeleteFab.tsx","store/user/action.ts","store/user/types.ts","components/filter/Filter.tsx","components/calendar/CalendarScreen.tsx","helpers/prepare-events.ts","hooks/useForm.ts","components/auth/LoginScreen.tsx","components/auth/RegisterScreen.tsx","routers/AuthRouter.tsx","routers/PrivateRoute.tsx","routers/PublicRoute.tsx","routers/AppRouter.tsx","store/modal/reducer.ts","store/calendar/reducer.ts","store/auth/reducer.ts","store/user/reducer.ts","store/filter/reducer.ts","store/index.ts","CalendarApp.tsx","index.tsx"],"names":["allowedMethods","runFetch","endpoint","data","method","token","includes","toUpperCase","Error","join","url","process","options","headers","body","JSON","stringify","fetch","checkingFinish","type","login","user","payload","logout","setActive","calendarEv","addNew","load","calendarEvs","update","deleteItem","id","addUserFilter","ids","Navbar","name","useSelector","state","auth","dispatch","useDispatch","className","onClick","Swal","fire","title","showCancelButton","confirmButtonText","cancelButtonText","then","result","isConfirmed","localStorage","clear","catch","error","icon","faSignOutAlt","messages","allDay","previous","next","today","month","week","day","agenda","date","time","event","noEventsInRange","showMore","total","CalendarEvent","_id","charAt","slice","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","moment","minutes","seconds","add","nowMoreOneHour","clone","initValuesForm","notes","start","endDate","CalendarModal","useState","formValues","setFormValues","titleValid","setTitleValid","modal","calendar","activeEvent","useEffect","item","handleInputChange","target","value","close","setTimeout","isOpen","modalOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","onSubmit","preventDefault","momentStart","momentEnd","isSameOrAfter","trim","length","Date","getTime","toString","toDate","email","a","getItem","resp","json","respJson","ok","msg","console","log","calendarEvent","startAddNew","noValidate","onChange","newEvent","isValidDate","currentDate","isAfter","placeholder","autoComplete","rows","faSave","AddNewFab","faPlus","DeleteFab","faTrash","loadUsers","users","Filter","location","useLocation","history","useHistory","filter","search","queryString","parse","arrayFormat","Array","isArray","actionMeta","map","idsFormatUrl","push","isMulti","getOptionValue","option","getOptionLabel","CalendarScreen","locale","localizer","momentLocalizer","lastView","setLastView","eventsFiltered","setEventsFiltered","calendarEvents","e","events","eventsAll","usersIds","startAccessor","endAccessor","eventPropGetter","end","isSelected","backgroundColor","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","view","setItem","components","onSelectSlot","info","selectable","useForm","initialState","values","setValues","LoginScreen","password","validator","isEmail","uid","startLogin","to","RegisterScreen","password1","password2","startRegister","AuthRouter","exact","path","component","PrivateRoute","isAuthenticated","rest","Component","props","PublicRoute","AppRouter","checking","existsUID","undefined","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf1deaba.chunk.js","sourcesContent":["const baseUrl = process.env.REACT_APP_API_URL;\n\nconst allowedMethods = ['GET', 'POST', 'PUT', 'DELETE']\n\nexport const runFetch = (endpoint: string, data: object, method: string, token?: string): Promise<Response> => {\n\n    if (!allowedMethods.includes(method.toUpperCase())) {\n        throw new Error(`Los métodos permitidos son ${allowedMethods.join(', ')}`);\n    }\n\n    const url: RequestInfo = `${baseUrl}/${endpoint}`;\n\n    let options: any = {\n        method,\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n\n    if (token) options.headers[\"x-token\"] = token;\n\n    if (method.toUpperCase() !== 'GET') options.body = JSON.stringify(data);\n\n    return fetch(url, options);\n};","//import { ThunkDispatch } from \"redux-thunk\";\nimport { Dispatch } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { runFetch } from \"../../helpers/fetch\";\nimport { AuthActionTypes, \n        authCheckingFinish, \n        authLogin, \n        authLogout, \n        CalendarUser \n} from \"./types\";\n\nexport const startLogin = (email: string, password: string) => {\n    return async (dispatch: Dispatch<AuthActionTypes>) => {\n\n        try {\n            const resp = await runFetch('auth', { email, password }, 'POST');\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                localStorage.setItem('token', respJson.token);\n                localStorage.setItem('token-init-date', new Date().getTime().toString());\n\n                dispatch(login({\n                    _id: respJson.body.uid,\n                    name: respJson.body.name,\n                    email: respJson.body.email\n                }));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n            \n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n        \n    }\n};\n\nexport const startRegister = (name: string, email: string, password: string) => {\n    return async (dispatch: Dispatch<AuthActionTypes>) => {\n\n        try {\n            const resp = await runFetch('auth/register', { name, email, password }, 'POST');\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                localStorage.setItem('token', respJson.token);\n                localStorage.setItem('token-init-date', new Date().getTime().toString());\n\n                dispatch(login({\n                    _id: respJson.body.uid,\n                    name: respJson.body.name,\n                    email: respJson.body.email\n                }));\n\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n        \n    }\n};\n\nexport const startChecking = () => {\n    return async (dispatch: Dispatch<AuthActionTypes>) => {\n\n        try {\n            const token = localStorage.getItem('token') as string;\n\n            const resp = await runFetch('auth/renew-token',  {}, 'GET', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                localStorage.setItem('token', respJson.token);\n                localStorage.setItem('token-init-date', new Date().getTime().toString());\n\n                dispatch(login({\n                    _id: respJson.body.uid,\n                    name: respJson.body.name,\n                    email: respJson.body.email\n                }));\n\n            } else {\n                dispatch(checkingFinish());\n            }\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }        \n\n    }   \n};\n\nexport const startLogout = () => {\n    return (dispatch: Dispatch<AuthActionTypes>) => {\n        localStorage.clear();\n        dispatch(logout());\n    }\n};\n\nconst checkingFinish = (): AuthActionTypes => {\n    return {\n        type: authCheckingFinish\n    }\n};\n\nconst login = (user: CalendarUser): AuthActionTypes => {\n    return {\n        type: authLogin,\n        payload: user\n    }\n};\n\nconst logout = (): AuthActionTypes => {\n    return {\n        type: authLogout\n    }\n};","export const authLogin = '[auth] Login';\nexport const authStartRegister = '[auth] Start Register';\nexport const authChecking = '[auth] Cheking login state';\nexport const authCheckingFinish = '[auth] Finish checking login state';\nexport const authLogout = '[auth] Logout';\nexport const authStartRenewToken = '[auth] Start renew token';\n\nexport type CalendarUser = {\n    _id: string;\n    name: string;\n    email: string;\n};\n\nexport type AuthState = {\n    checking: boolean;\n    _id?: string;\n    name?: string;\n    email?: string;\n};\n\ntype AuthLogin = {    \n    type: typeof authLogin,\n    payload: CalendarUser\n};\n\ntype AuthCheckingFinish = {    \n    type: typeof authCheckingFinish\n};\n\ntype AuthLogout = {    \n    type: typeof authLogout\n};\n\nexport type AuthActionTypes = AuthLogin | AuthCheckingFinish | AuthLogout;","import { Dispatch } from 'react';\nimport Swal from 'sweetalert2';\nimport { runFetch } from '../../helpers/fetch';\nimport { prepareCalendarEvs } from '../../helpers/prepare-events';\nimport {    CalendarActionTypes, \n            calendarAddNew, \n            calendarClearActive,\n            calendarDelete,\n            CalendarEv, \n            calendarLoad,\n            calendarReset,\n            calendarSetActive,\n            calendarUpdate\n} from './types';\n\n\nexport const startAddNew = (calendarEv: CalendarEv) => {\n    return async (dispatch: Dispatch<CalendarActionTypes>) => {\n\n        try {\n            \n            const token = localStorage.getItem('token') as string;\n            const resp = await runFetch('calendar-event', calendarEv, 'POST', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                calendarEv.id = respJson.body.calendarEvent.id;\n                dispatch(addNew(calendarEv));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n\n    }\n};\n\nexport const startLoad = () => {\n    return async (dispatch: Dispatch<CalendarActionTypes>) => {\n\n        try {\n            const token = localStorage.getItem('token') as string;\n            const resp = await runFetch('calendar-event', {}, 'GET', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                dispatch(load(prepareCalendarEvs(respJson.body.calendarEvents)));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n    }\n};\n\nexport const startUpdate = (calendarEv: CalendarEv) => {\n    return async (dispatch: Dispatch<CalendarActionTypes>) => {\n\n        try {\n            \n            const token = localStorage.getItem('token') as string;\n            const resp = await runFetch(`calendar-event/${calendarEv.id}`, calendarEv, 'PUT', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                dispatch(update(calendarEv));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n\n    }\n};\n\nexport const startDelete = (id: string) => {\n    return async (dispatch: Dispatch<CalendarActionTypes>) => {\n\n        try {\n            const token = localStorage.getItem('token') as string;\n            const resp = await runFetch(`calendar-event/${id}`, {}, 'DELETE', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                dispatch(deleteItem(id));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n            \n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n    }\n};\n\nexport const setActive = (calendarEv: CalendarEv): CalendarActionTypes => {\n    return {\n        type: calendarSetActive,\n        payload: calendarEv\n    }\n};\n\nexport const clearActive = (): CalendarActionTypes => {\n    return {\n        type: calendarClearActive\n    }\n};\n\nexport const reset = (): CalendarActionTypes => {\n    return {\n        type: calendarReset\n    }\n};\n\nconst addNew = (calendarEv: CalendarEv): CalendarActionTypes => {\n    return {\n        type: calendarAddNew,\n        payload: calendarEv\n    }\n};\n\nconst load = (calendarEvs: CalendarEv[]): CalendarActionTypes => {\n    return {\n        type: calendarLoad,\n        payload: calendarEvs\n    }\n};\n\nconst update = (calendarEv: CalendarEv): CalendarActionTypes => {\n    return {\n        type: calendarUpdate,\n        payload: calendarEv\n    }\n};\n\nconst deleteItem = (id: string): CalendarActionTypes => {\n    return {\n        type: calendarDelete,\n        payload: id\n    }\n};","import { CalendarUser } from '../../store/auth/types';\n\nexport const calendarStartAddNew = '[calendar] Start add new';\nexport const calendarAddNew = '[calendar] Add new';\nexport const calendarSetActive = '[calendar] Set active';\nexport const calendarClearActive = '[calendar] Clear active';\nexport const calendarUpdate = '[calendar] Update';\nexport const calendarDelete = '[calendar] Delete';\nexport const calendarLoad = '[calendar] Load';\nexport const calendarReset = '[calendar] Reset';\n\nexport type CalendarEv = {\n    id?: string;\n    title: string;\n    start: Date;\n    endDate: Date;\n    user: CalendarUser;\n    notes: string;\n};\n\nexport type CalendarState = {\n    events: CalendarEv[];\n    activeEvent: CalendarEv | null\n};\n\ntype CalendarAddNewAction = {    \n    type: typeof calendarAddNew,\n    payload: CalendarEv\n};\n\ntype CalendarSetActiveAction = {    \n    type: typeof calendarSetActive,\n    payload: CalendarEv\n};\n\ntype CalendarClearActiveAction = {\n    type: typeof calendarClearActive\n};\n\ntype CalendarUpdateAction = {\n    type: typeof calendarUpdate,\n    payload: CalendarEv\n};\n\ntype CalendarDeleteAction = {\n    type: typeof calendarDelete,\n    payload: string\n};\n\ntype CalendarLoadAction = {\n    type: typeof calendarLoad,\n    payload: CalendarEv[]\n};\n\ntype CalendarResetAction = {\n    type: typeof calendarReset\n};\n\nexport type CalendarActionTypes = CalendarAddNewAction | CalendarSetActiveAction | CalendarClearActiveAction | CalendarUpdateAction | CalendarDeleteAction | CalendarLoadAction | CalendarResetAction;","import { FilterActionTypes, filterAddUser, filterUserReset, FilterUser } from \"./types\";\n\nexport const addUserFilter = (ids: FilterUser[]): FilterActionTypes => {\n    return {\n        type: filterAddUser,\n        payload: ids\n    }\n};\n\nexport const resetUserFilter = (): FilterActionTypes => {\n    return {\n        type: filterUserReset\n    }\n};\n","export const filterAddUser = '[filter] Add user';\nexport const filterDeleteUser = '[filter] Delete user';\nexport const filterUserReset = '[filter] Reset user';\n\nexport type FilterUser = {\n    _id: string;\n    name: string;\n}\n\nexport type FilterState = {\n    users: FilterUser[];\n};\n\ntype FilterAddUserAction = {\n    type: typeof filterAddUser;\n    payload: FilterUser[];\n};\n\ntype FilterUserReset = {\n    type: typeof filterUserReset;\n}\n\nexport type FilterActionTypes = FilterAddUserAction | FilterUserReset;","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignOutAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Swal from 'sweetalert2';\n\nimport { RootState } from '../../store';\nimport { startLogout } from '../../store/auth/action';\nimport { reset } from '../../store/calendar/actions';\nimport { resetUserFilter } from '../../store/filter/action';\n\nexport const Navbar: React.FC = () => {\n\n    const { name } = useSelector((state: RootState) => state.auth);\n\n    const dispatch = useDispatch();\n\n    const handleLogout = () => {\n        Swal.fire({\n            title: '¿Seguro que desea salir?',\n            showCancelButton: true,\n            confirmButtonText: 'Sí',\n            cancelButtonText: 'Cancelar'\n\n        }).then(result => { \n            if (result.isConfirmed) {\n                dispatch(startLogout());\n                dispatch(reset());\n                dispatch(resetUserFilter());\n            }\n\n        }).catch(error => {\n            Swal.fire('Error', error, 'error');\n        });        \n    };\n\n    return (\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\n            <span className=\"navbar-brand\">\n                {  `Bienvenido ${name}` }\n            </span>\n\n            <button onClick={ handleLogout } className=\"btn btn-outline-danger\">\n                <FontAwesomeIcon icon={ faSignOutAlt } /> \n                <span> Salir </span>\n            </button>\n        </div>\n    )\n};","export const messages = {\n    allDay: 'Todo el día',\n    previous: '<',\n    next: '>',\n    today: 'Hoy',\n    month: 'Mes',\n    week: 'Semana',\n    day: 'Día',\n    agenda: 'Agenda',\n    date: 'Fecha',\n    time: 'Hora',\n    event: 'Evento',\n    noEventsInRange: 'No hay eventos en este rango',\n    showMore: (total: number) => `+ Ver más (${total})`\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { CalendarEv } from '../../store/calendar/types';\n\ninterface CalendarEventProps  {\n    event: CalendarEv;\n};\n\nexport const CalendarEvent: React.FC <CalendarEventProps> = ({ event }: CalendarEventProps) => {\n    \n    const { title, user } = event;\n    const { _id } = useSelector((state: RootState) => state.auth);\n    const name: string = user._id === _id ? 'Yo' : user.name.charAt(0).toUpperCase() + user.name.slice(1);\n\n    return (\n        <div>\n            <strong>{ title }</strong>\n            <p className=\"creator-event\">{ `Creador: ${name}` }</p>\n        </div>\n    );\n};","import React, { useState, FormEvent } from 'react';\nimport Modal from 'react-modal';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport Swal from 'sweetalert2';\nimport Datetime from 'react-datetime';\n\nimport \"react-datetime/css/react-datetime.css\";\n\nimport { RootState } from '../../store';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { closeModal } from '../../store/modal/actions';\nimport { CalendarEv } from '../../store/calendar/types';\nimport { startAddNew, clearActive, startUpdate } from '../../store/calendar/actions';\nimport { useEffect } from 'react';\nimport { ChangeEvent } from 'react';\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n    },\n};\n\nModal.setAppElement('#root');\n\nconst now: moment.Moment = moment().minutes(0).seconds(0).add(1, 'hours');\nconst nowMoreOneHour: moment.Moment = now.clone().add(1, 'hours');\n\nconst initValuesForm = {\n    title: '',\n    notes: '',\n    start: now,\n    endDate: nowMoreOneHour\n};\n\nexport const CalendarModal: React.FC = () => {\n\n    const [formValues, setFormValues] = useState(initValuesForm);\n\n    const [titleValid, setTitleValid] = useState<boolean>(true);\n\n    const { title, notes, start, endDate } = formValues;\n\n    const { modal, calendar, auth } = useSelector((state: RootState) => state);\n\n    const { activeEvent } = calendar;\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if ( activeEvent ) {\n            const item = {\n                ...activeEvent,\n                start: moment(activeEvent.start),\n                endDate: moment(activeEvent.endDate)\n            };\n            \n            setFormValues(item);\n\n        } else {\n            setFormValues( initValuesForm );\n        }\n\n    }, [activeEvent, setFormValues]);\n\n    const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n\n        setFormValues({\n            ...formValues,\n            [target.name]: target.value\n        });\n    };\n\n    const close = (): void => {        \n        dispatch(closeModal());\n        setTimeout(() => {\n            dispatch(clearActive());\n            setFormValues(initValuesForm); \n        }, 200);        \n    };\n\n    const handleStartDateChange = (event: string | moment.Moment): void => {\n        const newEvent = typeof event == 'string' ? moment(event) : event;\n        setFormValues({\n            ...formValues,\n            start: newEvent\n        })\n    };\n\n    const handleEndDateChange = (event: string | moment.Moment): void => {\n        const newEvent = typeof event == 'string' ? moment(event) : event;\n        setFormValues({\n            ...formValues,\n            endDate: newEvent\n        });\n    };\n\n    const handleSubmitForm = (event: FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n\n        const momentStart = moment(start);\n        const momentEnd = moment(endDate);\n\n        if (momentStart.isSameOrAfter(momentEnd, 'hour')) {\n            Swal.fire('Error', 'La fecha fin debe ser mayor a la de inicio', 'error');\n            return;\n        }\n\n        if (title.trim().length < 2) {\n            setTitleValid(false);\n            return;\n        }\n        \n        if (activeEvent?.id) { // actualizando un evento\n            const item: CalendarEv = {\n                id: new Date().getTime().toString(),\n                ...formValues,\n                start: formValues.start.toDate(),\n                endDate: formValues.endDate.toDate(),\n                user: {\n                    _id: auth._id ? auth._id: '',\n                    name: auth.name ? auth.name: '',\n                    email: auth.email ? auth.email : ''\n                }\n            };\n\n            dispatch(startUpdate(item));    \n\n        } else { // creando un nuevo evento\n            const item: CalendarEv = {                \n                ...formValues,\n                start: formValues.start.toDate(),\n                endDate: formValues.endDate.toDate(),\n                user: {\n                    _id: auth._id ? auth._id: '',\n                    name: auth.name ? auth.name: '',\n                    email: auth.email ? auth.email : ''\n                }\n            };\n    \n            dispatch(startAddNew(item));\n        }\n\n        setTitleValid(true);\n        close();\n    };\n\n    const validationDateEnd = (currentDate: moment.Moment): boolean => {\n        return currentDate.isAfter(moment(start));\n    };\n\n    return (\n        <Modal\n            isOpen={ modal.modalOpen }\n            onRequestClose={ close }\n            style={ customStyles }\n            closeTimeoutMS={ 200 }\n            className=\"modal\"\n            overlayClassName=\"modal-fondo\"\n        > \n            <h1> {activeEvent?.id ? 'Editar evento' : 'Nuevo evento'} </h1>\n            <hr />\n            <form className=\"container\" onSubmit={ handleSubmitForm } noValidate>\n\n                <div className=\"form-group\">\n                    <label>Fecha y hora inicio</label>\n                    <Datetime \n                        onChange={ handleStartDateChange }\n                        value={ start }\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Fecha y hora fin</label>\n                    <Datetime \n                        onChange={ handleEndDateChange }\n                        value={ endDate }\n                        isValidDate={ validationDateEnd }\n                        \n                    />\n                </div>\n\n                <hr />\n                <div className=\"form-group\">\n                    <label>Título y notas</label>\n                    <input \n                        type=\"text\" \n                        className={`form-control ${!titleValid && 'is-invalid'}`}\n                        placeholder=\"Título del evento\"\n                        name=\"title\"\n                        autoComplete=\"off\"\n                        value={ title }\n                        onChange={ handleInputChange }\n                        \n                    />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\n                </div>\n\n                <div className=\"form-group\">\n                    <textarea\n                        className=\"form-control\"\n                        placeholder=\"Notas\"\n                        rows={ 5 }\n                        name=\"notes\"\n                        value={ notes }\n                        onChange={ handleInputChange }\n                        \n                    ></textarea>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\n                </div>\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-primary btn-block\"\n                >\n                    <i className=\"far fa-save\"></i>\n                    <FontAwesomeIcon icon={ faSave } /> \n                    <span> Guardar</span>\n                </button>\n\n            </form>\n        </Modal>\n    )\n};","import { ModalActionTypes, uiCloseModal, uiOpenModal } from './types';\n\nexport const openModal = (): ModalActionTypes => {\n    return {\n        type: uiOpenModal\n    }\n};\n\nexport const closeModal = (): ModalActionTypes => {\n    return {\n        type: uiCloseModal\n    }\n};","export const uiOpenModal = '[ui] Open modal';\nexport const uiCloseModal = '[ui] Close modal';\n\nexport type ModalState = {\n    modalOpen: boolean;\n};\n\ntype ModalOpenAction = {\n    type: typeof uiOpenModal;\n};\n\ntype ModalCloseAction = {\n    type: typeof uiCloseModal;\n};\n\nexport type ModalActionTypes = ModalOpenAction | ModalCloseAction;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { useDispatch } from 'react-redux';\nimport { openModal } from '../../store/modal/actions';\nimport { clearActive } from '../../store/calendar/actions';\n\nexport const AddNewFab: React.FC = () => {\n\n    const dispatch = useDispatch();\n\n    const handleNewEvent = (): void => {\n        dispatch(openModal());\n        dispatch(clearActive());\n    };\n\n    return (\n        <button\n            onClick={ handleNewEvent }\n            className=\"btn btn-primary fab\"\n        >\n            <FontAwesomeIcon icon={ faPlus } />\n        </button>\n    )\n};","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Swal from 'sweetalert2';\n\nimport { RootState } from '../../store';\nimport { startDelete } from '../../store/calendar/actions';\n\n\nexport const DeleteFab: React.FC = () => {\n\n    const { calendar } = useSelector((state: RootState) => state);\n\n    const dispatch = useDispatch();\n\n    const handleNewEvent = (): void => {\n        const activeEvent = calendar.activeEvent;\n        \n        if (activeEvent) {\n\n            Swal.fire({\n                title: '¿Seguro que desea eliminar el evento?',\n                showCancelButton: true,\n                confirmButtonText: 'Sí',\n                cancelButtonText: 'Cancelar'\n            }).then(result => { \n                if (result.isConfirmed && activeEvent?.id) {\n                    dispatch(startDelete(activeEvent.id));\n                }\n\n            }).catch(error => {\n                Swal.fire('Error', error, 'error');\n            });            \n        }\n        \n    };\n\n    return (\n        <button\n            onClick={ handleNewEvent }\n            className=\"btn btn-danger fab-danger\"\n        >\n            <FontAwesomeIcon icon={ faTrash } />\n        </button>\n    )\n};","import { Dispatch } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { runFetch } from \"../../helpers/fetch\";\nimport { CalendarUser } from \"../auth/types\";\nimport { UserActionTypes, usersLoad } from \"./types\";\n\nexport const startLoadUsers = () => {\n    return async (dispatch: Dispatch<UserActionTypes>) => {\n\n        try {\n            \n            const token = localStorage.getItem('token') as string;\n            const resp = await runFetch('user', {}, 'GET', token);\n            const respJson = await resp.json();\n\n            if (respJson.ok) {\n                const users: CalendarUser[] = respJson.body.users;\n                dispatch(loadUsers(users));\n            } else {\n                Swal.fire('Error', respJson.msg, 'error');\n            }\n\n        } catch (error) {\n            console.log(error);\n            Swal.fire('Error', 'Error en la aplicación', 'error');\n        }\n\n    }\n};\n\nconst loadUsers = (users: CalendarUser[]): UserActionTypes => {\n    return {\n        type: usersLoad,\n        payload: users\n    }\n};","import { CalendarUser } from \"../auth/types\";\n\nexport const usersLoad = '[user] Load users';\n\nexport type UserState = {\n    users: CalendarUser[];\n};\n\ntype UsersLoadAction = {\n    type: typeof usersLoad;\n    payload: CalendarUser[];\n};\n\nexport type UserActionTypes = UsersLoadAction;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Select, { ActionMeta, OptionsType } from 'react-select';\nimport queryString from 'query-string'\n\nimport { RootState } from '../../store';\nimport { addUserFilter } from '../../store/filter/action';\nimport { startLoadUsers } from '../../store/user/action';\n\nexport const Filter: React.FC = () => {\n\n    const dispatch = useDispatch();\n\n    const location = useLocation();\n\n    const history = useHistory();\n\n\n    useEffect(() => {\n        dispatch(startLoadUsers());\n    }, [dispatch]);\n\n    const { user, filter } = useSelector((state: RootState) => state);\n\n    useEffect(() => {\n        \n        if (location.search) {\n            let ids = queryString.parse(location.search, {arrayFormat: 'comma'}).users as string[];\n           \n            if (ids) {\n\n                if (!Array.isArray(ids)) ids = [ids];\n                const users = user.users.filter(user => ids.includes(user._id));\n                dispatch(addUserFilter(users));\n\n            }           \n            \n        }\n\n\n    }, [user.users, location.search, dispatch]);\n    \n\n    const addUserToFilter = (event: OptionsType<object>, actionMeta: ActionMeta<object>) => {\n\n        const ids = event.map((user: any) => {\n            return user._id\n        });\n\n        const idsFormatUrl = queryString.stringify({ users: ids }, { arrayFormat: 'comma' });\n\n        dispatch(addUserFilter(ids));\n        history.push(`?${idsFormatUrl}`); \n    };\n    \n    return (\n        <div className=\"mb-3 ml-1 mr-1\">\n             <Select\n                onChange={ addUserToFilter }\n                value={ filter.users }\n                options={ user.users }\n                isMulti\n                getOptionValue={ (option: any) => option._id}\n                getOptionLabel={ (option: any) => option.name}  \n                placeholder=\"Buscar por usuario...\"              \n            />\n            \n        </div>\n    )\n};","import React, { useEffect, useState } from 'react';\nimport { Calendar, momentLocalizer, SlotInfo } from 'react-big-calendar';\nimport moment from 'moment';\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'moment/locale/es';\n\nimport { Navbar } from '../ui/Navbar';\nimport { messages } from '../../helpers/calendar-messages-es';\nimport { View, stringOrDate } from 'react-big-calendar';\nimport { CalendarEv } from '../../store/calendar/types';\nimport { CalendarEvent } from './CalendarEvent';\nimport { CalendarModal } from './CalendarModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { openModal } from '../../store/modal/actions';\nimport { setActive, startLoad } from '../../store/calendar/actions';\nimport { AddNewFab } from '../ui/AddNewFab';\nimport { RootState } from '../../store';\nimport { DeleteFab } from '../ui/DeleteFab';\nimport { Filter } from '../filter/Filter';\n\n\nexport const CalendarScreen: React.FC = () => {\n\n    moment.locale('es');\n    const localizer = momentLocalizer(moment);\n\n    const [lastView, setLastView] = useState<View>(localStorage.getItem('lastView') as View || 'month');\n    const [eventsFiltered, setEventsFiltered] = useState<Array<CalendarEv>>([]);\n\n    const dispatch = useDispatch();   \n\n    useEffect(() => {\n        dispatch(startLoad());\n    }, [dispatch]);     \n\n    const { calendar, auth } = useSelector((state: RootState) => state);\n\n    useEffect(() => {\n\n        setEventsFiltered(calendar.events);\n        \n    }, [calendar.events]);\n\n    const eventsAll: CalendarEv[] = calendar.events;\n\n    const { users } = useSelector((state: RootState) => state.filter);\n\n    useEffect(() => {\n\n        let events: CalendarEv[];\n\n        if (users.length) {\n\n            const usersIds = users.map(user => user._id);\n\n            events = eventsAll.filter(event => usersIds.includes(event.user._id));\n\n        } else {\n            events = eventsAll;\n        }\n\n        setEventsFiltered(events);   \n\n    }, [users, eventsAll]);\n\n    const onDoubleClick = (event: CalendarEv): void => {\n        dispatch(openModal());\n    };\n\n    const onSelectEvent = (event: CalendarEv): void => {\n        dispatch(setActive(event));\n    };\n\n    const onViewChange = (view: View): void => {\n        setLastView(view);\n        localStorage.setItem('lastView', view);\n    };\n\n    const eventStyleGetter = (event: CalendarEv, start: stringOrDate, end: stringOrDate, isSelected: boolean): React.HTMLAttributes<HTMLDivElement> => {\n\n        const style = {\n            backgroundColor: auth._id === event.user._id ? '#367CF7': '#465660',\n            borderRadius: '0px',\n            opacity: 0.8,\n            display: 'block',\n            color: 'white'\n        };\n\n        return {\n            style\n        };\n    };  \n    \n    const onSelectSlot = (info: SlotInfo) => {\n        const item: CalendarEv = {\n            title: '',\n            start: info.start as Date,\n            endDate: info.end as Date,\n            user: {\n                _id: auth._id ? auth._id: '',\n                name: auth.name ? auth.name: '',\n                email: auth.email ? auth.email : ''\n            },\n            notes: ''\n        }\n        dispatch(setActive(item));\n        dispatch(openModal());\n\n    };\n    \n    return (\n        <div className=\"calendar-screen\">\n            <Navbar />\n\n            <Filter />\n\n            <Calendar\n                localizer={ localizer }\n                events={ eventsFiltered }\n                startAccessor=\"start\"\n                endAccessor={(event: CalendarEv) => event.endDate || event.start}\n                messages={ messages }\n                eventPropGetter={ eventStyleGetter }\n                onDoubleClickEvent={ onDoubleClick }\n                onSelectEvent={ onSelectEvent }\n                onView={ onViewChange }\n                view={ lastView }\n                components={{\n                    event: CalendarEvent\n                }}\n                onSelectSlot={ onSelectSlot }\n                selectable={ true }\n            />\n\n            <CalendarModal />\n\n            <AddNewFab />\n            { calendar.activeEvent?.id && <DeleteFab /> }\n\n        </div>\n    )\n};","import moment from 'moment'\nimport { CalendarEv } from \"../store/calendar/types\";\n\nexport const prepareCalendarEvs = (calendarEvs: CalendarEv[]) => {\n    return calendarEvs.map( e => {\n        return {\n            ...e,\n            start: moment(e.start).toDate(),\n            endDate: moment(e.endDate).toDate()\n        }\n    });\n};","import { ChangeEvent, useState } from 'react';\n\nconst useForm = <T extends Object>(initialState: T) => {\n\n    const [values, setValues] = useState<T>(initialState);\n\n    const reset = () => {\n        setValues(initialState);\n    };\n\n    const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValues({\n            ...values,\n            [target.name]: target.value\n        });\n    };\n\n    return [values, handleInputChange, reset] as const;\n}\n\nexport default useForm;","import React, { FormEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport validator from 'validator';\n\nimport useForm from '../../hooks/useForm';\nimport { startLogin } from '../../store/auth/action';\nimport './auth.css';\n\nexport const LoginScreen: React.FC = () => {\n\n    interface LoginForm {\n        email: string;\n        password: string;\n    };\n\n    const initFormValues: LoginForm = {\n        email: '',\n        password: ''\n    };\n\n    const dispatch = useDispatch();\n\n    const [ formValues, handleInputChange ] = useForm<LoginForm>(initFormValues);\n    \n    const { email, password } = formValues;\n\n    const handleSubmitForm = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (!validator.isEmail(email)) {\n\n            return false;\n\n        } else if (!password || password.length < 5) {\n\n            return false;\n\n        }\n\n        dispatch(startLogin(email, password));\n\n    };\n\n    return (\n        <div className=\"container login-container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 login-form-1\">\n                    <h3>Ingreso</h3>\n                    <form onSubmit={ handleSubmitForm }>\n                        <div className=\"form-group\">\n                            <input \n                                type=\"text\"\n                                name=\"email\"\n                                className=\"form-control\"\n                                placeholder=\"Correo\"\n                                value={ email }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                name=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\"\n                                value={ password }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input \n                                type=\"submit\"\n                                className=\"btnSubmit\"\n                                value=\"Login\" \n                            />\n                        </div>\n                        <Link\n                            to=\"/auth/register\"\n                            className=\"link\"    \n                        >\n                            Crea una nueva cuenta\n                        </Link>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n};","import React, { FormEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Swal from 'sweetalert2';\nimport validator from 'validator';\nimport useForm from '../../hooks/useForm';\nimport { startRegister } from '../../store/auth/action';\nimport './auth.css';\n\nexport const RegisterScreen: React.FC = () => {\n\n    interface RgisterForm {\n        name: string;\n        email: string;\n        password1: string;\n        password2: string;\n    };\n\n    const initFormValues: RgisterForm = {\n        name: '',\n        email: '',\n        password1: '',\n        password2: ''\n    };\n\n    const dispatch = useDispatch();\n\n    const [ formValues, handleInputChange ] = useForm<RgisterForm>(initFormValues);\n    \n    const { name, email, password1, password2 } = formValues;\n\n    const handleSubmitForm = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (name.trim().length === 0) {\n            Swal.fire('Error', 'Nombre es requerido', 'error');\n            return false;\n\n        } else if (!validator.isEmail(email)) {\n            Swal.fire('Error', 'Email inválido', 'error');\n            return false;\n\n        }else if (password1 !== password2 || password1.length < 5) {\n            Swal.fire('Error', 'Contraseña debe tener al menos 6 caracteres y deben coincidir', 'error');\n            return false;\n\n        }\n\n        dispatch(startRegister(name, email, password1));\n\n    };\n\n    return (\n        <div className=\"container login-container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 login-form-2\">\n                    <h3>Registro</h3>\n                    <form onSubmit={ handleSubmitForm }>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Nombre\"\n                                name=\"name\"\n                                autoComplete=\"off\"\n                                value={ name }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                placeholder=\"Correo\"\n                                name=\"email\"\n                                autoComplete=\"off\"\n                                value={ email }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Contraseña\" \n                                name=\"password1\"\n                                value={ password1 }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"Repita la contraseña\" \n                                name=\"password2\"\n                                value={ password2 }\n                                onChange={ handleInputChange }\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input \n                                type=\"submit\" \n                                className=\"btnSubmit\" \n                                value=\"Crear cuenta\" />\n                        </div>\n\n                        <Link\n                            className=\"link-register\"\n                            to=\"/auth/login\"\n                        >\n                            ¿Ya registrado?\n                        </Link>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n};","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\n\nexport const AuthRouter: React.FC = () => {\n    return (\n            <Switch>\n\n                <Route exact path=\"/auth/login\" component={ LoginScreen } />\n\n                <Route exact path=\"/auth/register\" component={ RegisterScreen } />\n\n                <Redirect to=\"/auth/login\" />\n\n            </Switch>\n    )\n};","import React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\ntype ProtectedRouteProps = RouteProps & {\n    isAuthenticated: boolean;\n};\n\nexport const PrivateRoute: React.FC<ProtectedRouteProps> = ({isAuthenticated, component, ...rest}: ProtectedRouteProps) => {\n\n    const Component: React.ComponentType<any> = component as React.ComponentType<any>;\n\n    return (\n        <Route \n            { ...rest }\n\n            component={ (props: RouteProps) => (\n\n                (isAuthenticated) \n                ? (<Component { ...props } />)\n\n                : (<Redirect to=\"/auth/login\" />)\n\n            )}\n        \n        />\n    )\n};\n\nPrivateRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired\n};","import React from 'react';\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\ntype ProtectedRouteProps = RouteProps & {\n    isAuthenticated: boolean;\n};\n\nexport const PublicRoute: React.FC<ProtectedRouteProps> = ({isAuthenticated, component, ...rest}: ProtectedRouteProps) => {\n\n    const Component: React.ComponentType<any> = component as React.ComponentType<any>;\n\n    return (\n        <Route \n            { ...rest }\n\n            component={ (props: RouteProps) => (\n\n                (!isAuthenticated) \n                ? (<Component { ...props } />)\n\n                : (<Redirect to=\"/\" />)\n\n            )}\n        \n        />\n    )\n};\n\nPublicRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    HashRouter as Router,\n    Switch,\n    Redirect\n} from 'react-router-dom';\nimport { CalendarScreen } from '../components/calendar/CalendarScreen';\nimport { RootState } from '../store';\nimport { startChecking } from '../store/auth/action';\nimport { AuthRouter } from './AuthRouter';\nimport { PrivateRoute } from './PrivateRoute';\nimport { PublicRoute } from './PublicRoute';\n\n\nexport const AppRouter: React.FC = () => {\n\n    const dispatch = useDispatch();\n\n    const { checking, _id } = useSelector((state: RootState) => state.auth);\n    const existsUID = _id !== undefined;\n\n    useEffect(() => {\n        dispatch(startChecking());\n    }, [dispatch])\n\n    if (checking) {\n        return (<h1>Espere...</h1>)\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <PublicRoute isAuthenticated={ existsUID } component={ AuthRouter } path=\"/auth\" />\n\n                    <PrivateRoute isAuthenticated={ existsUID } component={ CalendarScreen } path=\"/\" exact/>\n\n                    <Redirect to=\"/auth/login\" />\n\n                    {/* <Route path=\"/auth\" component={ AuthRouter }/>\n                    <Route exact path=\"/\" component={ CalendarScreen } /> \n                    <Redirect to=\"/auth/login\" /> */}\n                </Switch>\n            </div>\n        </Router>\n    )\n};","import { ModalActionTypes, ModalState, uiCloseModal, uiOpenModal } from \"./types\";\n\nconst initialState: ModalState = {\n    modalOpen: false\n};\n\nexport const modalReducer = (state: typeof initialState = initialState, action: ModalActionTypes): ModalState => {\n\n    switch (action.type) {\n        case uiOpenModal:            \n            return {\n                ...state,\n                modalOpen: true\n            };\n\n        case uiCloseModal:        \n            return {\n                ...state,\n                modalOpen: false\n            };\n    \n        default:\n            return state;\n    }\n\n};","import { CalendarActionTypes, \n        calendarAddNew, \n        calendarClearActive, \n        calendarDelete, \n        CalendarEv, \n        calendarLoad, \n        calendarReset, \n        calendarSetActive, \n        CalendarState, \n        calendarUpdate\n} from \"./types\";\n\nconst initialState: CalendarState = {\n    events: [],\n    activeEvent: null\n};\n\nexport const calendarReducer = (state: typeof initialState = initialState, action: CalendarActionTypes): CalendarState => {\n\n    switch (action.type) {\n        case calendarAddNew:\n            return {\n                ...state,\n                events: [action.payload, ...state.events]\n            };\n\n        case calendarSetActive:\n            return {\n                ...state,\n                activeEvent: action.payload\n            };\n\n        case calendarClearActive:\n            return {\n                ...state,\n                activeEvent: null\n            };\n\n        case calendarUpdate:\n            return {\n                ...state,\n                events: state.events.map(\n                    (e: CalendarEv) => (e.id === action.payload.id) ? action.payload : e\n                )\n            };\n\n        case calendarDelete:\n            return {\n                ...state,\n                events: state.events.filter((e: CalendarEv) => e.id !== action.payload),\n                activeEvent: null\n            };\n\n        case calendarLoad:\n            return {\n                ...state,\n                events: [...action.payload]\n            };\n\n        case calendarReset:\n            return {\n                ...initialState\n            };\n\n        default:\n            return state;\n    }\n\n};","import { AuthActionTypes, authCheckingFinish, authLogin, authLogout, AuthState } from \"./types\";\n\nconst initialState: AuthState = {\n    checking: true\n};\n\nexport const authReducer = (state: typeof initialState = initialState, action: AuthActionTypes): AuthState => {\n\n    switch (action.type) {\n        case authLogin:\n            return {\n                ...state,\n                ...action.payload,\n                checking: false                \n            };\n\n        case authCheckingFinish:\n            return {\n                ...state,\n                checking: false\n            };\n        \n            case authLogout:\n                return {\n                   checking: false \n                };\n    \n        default:\n            return state;\n    }\n};","import { UserActionTypes, usersLoad, UserState } from \"./types\";\n\nconst initialState: UserState = {\n    users: []\n};\n\nexport const userReducer = (state: typeof initialState = initialState, action: UserActionTypes): UserState => {\n\n    switch (action.type) {\n\n        case usersLoad:\n            return {\n                ...state,\n                users: [...action.payload]\n            }\n    \n        default:\n            return state;\n    }\n\n};","import { FilterActionTypes, filterAddUser, FilterState, filterUserReset } from \"./types\";\n\nconst initialState: FilterState = {\n    users: []\n};\n\nexport const filterReducer = (state: typeof initialState = initialState, action: FilterActionTypes): FilterState => {\n\n    switch (action.type) {\n\n        case filterAddUser:\n            return {\n                ...state,\n                users: [...action.payload]\n\n            };\n\n        case filterUserReset:\n            return {\n                ...initialState\n            };\n    \n        default:\n            return state;\n    }\n\n};","import { applyMiddleware, combineReducers, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { modalReducer } from './modal/reducer';\nimport { calendarReducer } from './calendar/reducer';\nimport { authReducer } from './auth/reducer';\nimport { userReducer } from './user/reducer';\nimport { filterReducer } from './filter/reducer';\n\nimport { ModalState } from './modal/types';\nimport { CalendarState } from './calendar/types';\nimport { AuthState } from './auth/types';\nimport { UserState } from './user/types';\nimport { FilterState } from './filter/types';\n\ndeclare global {\n    interface Window {\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n};\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport interface RootState {\n    modal: ModalState;\n    calendar: CalendarState;\n    auth: AuthState;\n    user: UserState;\n    filter: FilterState;\n};\n\nexport const rootReducer = combineReducers({\n    modal: modalReducer,\n    calendar: calendarReducer,\n    auth: authReducer,\n    user: userReducer,\n    filter: filterReducer\n});\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk))\n);","import React, { FC, ReactElement }  from 'react';\nimport { Provider } from 'react-redux';\nimport { AppRouter } from './routers/AppRouter';\nimport { store } from './store';\nexport const CalendarApp: FC = (): ReactElement => {\n    return (\n        <Provider store={ store } >\n            <AppRouter />\n        </Provider>\n    )\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CalendarApp } from './CalendarApp';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './styles.css';\n\nReactDOM.render(\n\t<CalendarApp />,\n \tdocument.getElementById('root')\n);"],"sourceRoot":""}